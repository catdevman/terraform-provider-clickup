// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

package provider

import (
	"context"
	"fmt"

	"github.com/hashicorp/terraform-plugin-framework/datasource"
    "github.com/hashicorp/terraform-plugin-framework/tfsdk"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-log/tflog"
	goclickup "github.com/raksul/go-clickup/clickup"
)

// Ensure provider defined types fully satisfy framework interfaces.
var _ datasource.DataSource = &TeamsDataSource{}

func NewTeamsDataSource() datasource.DataSource {
	return &TeamsDataSource{}
}

// TeamsDataSource defines the data source implementation.
type TeamsDataSource struct {
	clickup *goclickup.Client
}

// TeamsDataSourceModel describes the data source data model.
type TeamsDataSourceModel struct {
    Teams []Team `tfsdk:"teams"`
}

type Team struct {
    Id types.String `tfsdk:"id"`
    Name types.String `tfsdk:"name"`
    Color types.String `tfsdk:"color"`
    Members []Member `tfsdk:"members"`
}

type Member struct {
    User struct{
        Id types.String`tfsdk:"id"`
        Username types.String `tfsdk:"username"`
        Email types.String `tfsdk:"email"`
        Color types.String `tfsdk:"color"`
        ProfilePicture types.String `tfsdk:"profile_picture"`
        Initials types.String `tfsdk:"initials"`
        Role types.String `tfsdk:"role"`
        LastActive types.String `tfsdk:"last_active"`
        DateJoined types.String `tfsdk:"date_joined"`
        DateInvited types.String `tfsdk:"date_invited"`
    } `tfsdk:"user"`
    InvitedBy struct{
        Id types.String`tfsdk:"id"`
        Username types.String `tfsdk:"username"`
        Email types.String `tfsdk:"email"`
        Color types.String `tfsdk:"color"`
        ProfilePicture types.String `tfsdk:"profile_picture"`
        Initials types.String `tfsdk:"initials"`
    } `tfsdk:"invited_by"` 
}

func (d *TeamsDataSource) Metadata(ctx context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_teams"
}

func (d *TeamsDataSource) Schema(ctx context.Context, req datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = tfsdk.Schema{
		// This description is used by the documentation generator and the language server.
		MarkdownDescription: "Teams data source",

		Attributes: map[string]tfsdk.Attribute{
			"teams": schema.ListNestedAttribute{
				MarkdownDescription: "Teams identifier",
				Computed:            true,
                NestedObject: schema.NestedAttributeObject{
                    Attributes: map[string]schema.Attribute{
                        "id": schema.StringAttribute{
                            Computed: true,
                        },
                        "name": schema.StringAttribute{
                            Computed: true,
                        },
                        "color": schema.StringAttribute{
                            Computed: true,
                        },
                        "members": schema.ListNestedAttribute{
                            Computed: true,
                            NestedObject: schema.NestedAttributeObject{
                                Attributes: map[string]schema.Attribute{
                                    "user": schema.NestedAttributeObject{
                                        Attributes: map[string]schema.Attribute{ 
                                            "id": schema.StringAttribute{},
                                            "username": schema.StringAttribute{},
                                            "email": schema.StringAttribute{},
                                            "color": schema.StringAttribute{},
                                            "profilePicture": schema.StringAttribute{},
                                            "initials": schema.StringAttribute{},
                                            "role": schema.StringAttribute{},
                                            "last_active": schema.StringAttribute{},
                                            "date_joined": schema.StringAttribute{},
                                            "date_invited": schema.StringAttribute{},
                                        },
                                    },
                                    "invited_by": schema.NestedAttributeObject{ 
                                        Attributes: map[string]schema.Attribute{
                                            "id": schema.StringAttribute{},
                                            "username": schema.StringAttribute{},
                                            "email": schema.StringAttribute{},
                                            "color": schema.StringAttribute{},
                                            "profilePicture": schema.StringAttribute{},
                                            "initials": schema.StringAttribute{},
                                            "role": schema.StringAttribute{},
                                            "last_active": schema.StringAttribute{},
                                            "date_joined": schema.StringAttribute{},
                                            "date_invited": schema.StringAttribute{},
                                        },
                                    },
                                },
                            },
                        },
                    },
                },
			},
        },
	}
}

func (d *TeamsDataSource) Configure(ctx context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
	// Prevent panic if the provider has not been configured.
	if req.ProviderData == nil {
		return
	}

	client, ok := req.ProviderData.(*goclickup.Client)

	if !ok {
		resp.Diagnostics.AddError(
			"Unexpected Data Source Configure Type",
			fmt.Sprintf("Expected *http.Client, got: %T. Please report this issue to the provider developers.", req.ProviderData),
		)

		return
	}

	d.clickup = client
}

func (d *TeamsDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	var data TeamsDataSourceModel

	// Read Terraform configuration data into the model
	resp.Diagnostics.Append(req.Config.Get(ctx, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// If applicable, this is a great opportunity to initialize any necessary
	// provider client data and make a call using it.
	// httpResp, err := d.client.Do(httpReq)
	// if err != nil {
	//     resp.Diagnostics.AddError("Client Error", fmt.Sprintf("Unable to read example, got error: %s", err))
	//     return
	// }

	// For the purposes of this example code, hardcoding a response value to
	// save into the Terraform state.
	// data.Teams = types.ListValueMust()

	// Write logs using the tflog package
	// Documentation: https://terraform.io/plugin/log
	tflog.Trace(ctx, "read a data source")

	// Save data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}
